module NumeralsConversion where

import Prelude

import Data.Maybe (Maybe(Just, Nothing))
import Data.String.CodeUnits (indexOf, singleton, toCharArray, fromCharArray)
import Data.String.Pattern (Pattern(Pattern))

isIn :: Char -> String -> Boolean
isIn needle haystack = 
  let result = indexOf (Pattern (singleton needle)) haystack
  in case result of 
       Just _ -> true 
       Nothing -> false 


westernizeNumeral :: Char -> Char
westernizeNumeral character =
  case character of
    _ | isIn character "\x0660\x06F0\x0966\x09E6\x0A66\x0AE6\x0B66\x0C66\x0CE6\x0D66\x0E50\x0ED0\x0F20\x1040\x17E0\x1810\x1946\x07C0\x0BE6\x19D0\x1B50\x1090\x1BB0\x1C40\x1C50\xA620\xA8D0\xA900\xAA50\x1A80\x1A90\xA9D0\xABF0\x11066\x110F0\x11136\x111D0\x116C0\x11650\x11730\xA9F0\x16B50\x0DE6\x112F0\x114D0\x118E0\x16A60" -> '0'
    _ | isIn character "\x0661\x06F1\x0967\x09E7\x0A67\x0AE7\x0B67\x0BE7\x0C67\x0CE7\x0D67\x0E51\x0ED1\x0F21\x1041\x17E1\x1811\x1947\x07C1\x19D1\x1B51\x10A40\x1091\x1BB1\x1C41\x1C51\xA621\xA8D1\xA901\xAA51\x19DA\x1A81\x1A91\xA9D1\xABF1\x10E60\x11067\x110F1\x11137\x111D1\x116C1\x11651\x11731\x111E1\xA9F1\x102E1\x16B51\x11367\x0DE7\x112F1\x114D1\x1E8C7\x118E1\x16A61" -> '1'
    _ | isIn character "\x0662\x06F2\x0968\x09E8\x0A68\x0AE8\x0B68\x0BE8\x0C68\x0CE8\x0D68\x0E52\x0ED2\x0F22\x1042\x17E2\x1812\x1948\x104A2\x07C2\x19D2\x1B52\x10A41\x1092\x1BB2\x1C42\x1C52\xA622\xA8D2\xA902\xAA52\x1A82\x1A92\xA9D2\xABF2\x10E61\x11068\x110F2\x11138\x111D2\x116C2\x11652\x11732\x111E2\xA9F2\x102E2\x16B52\x0DE8\x112F2\x114D2\x1E8C8\x118E2\x16A62" -> '2'
    _ | isIn character "\x0663\x06F3\x0969\x09E9\x0A69\x0AE9\x0B69\x0BE9\x0C69\x0CE9\x0D69\x0E53\x0ED3\x0F23\x1043\x17E3\x1813\x1949\x104A3\x07C3\x19D3\x1B53\x10A42\x1093\x1BB3\x1C43\x1C53\xA623\xA8D3\xA903\xAA53\x1A83\x1A93\xA9D3\xABF3\x10E62\x11069\x110F3\x11139\x111D3\x116C3\x11653\x11733\x111E3\xA9F3\x102E3\x16B53\x0DE9\x112F3\x114D3\x118E3\x16A63" -> '3'
    _ | isIn character "\x0664\x06F4\x096A\x09EA\x0A6A\x0AEA\x0B6A\x0BEA\x0C6A\x0CEA\x0D6A\x0E54\x0ED4\x0F24\x1044\x17E4\x1814\x194A\x104A4\x07C4\x19D4\x1B54\x10A43\x1094\x1BB4\x1C44\x1C54\xA624\xA8D4\xA904\xAA54\x1A84\x1A94\xA9D4\xABF4\x10E63\x1106A\x110F4\x1113A\x111D4\x116C4\x11654\x11734\x111E4\xA9F4\x102E4\x16B54\x0DEA\x112F4\x114D4\x1E8CA\x118E4\x16A64" -> '4'
    _ | isIn character "\x0665\x06F5\x096B\x09EB\x0A6B\x0AEB\x0B6B\x0BEB\x0C6B\x0CEB\x0D6B\x0E55\x0ED5\x0F25\x1045\x17E5\x1815\x194B\x104A5\x07C5\x19D5\x1095\x1BB5\x1C45\x1C55\xA8D5\xA905\xAA55\x1A85\x1A95\xA9D5\xABF5\x10E64\x1106B\x110F5\x1113B\x111D5\x116C5\x11655\x11735\x111E5\xA9F5\x102E5\x16B55\x1136B\x0DEB\x112F5\x114D5\x1E8CB\x118E5\x16A65" -> '5'
    _ | isIn character "\x0666\x06F6\x096C\x09EC\x0A6C\x0AEC\x0B6C\x0BEC\x0C6C\x0CEC\x0D6C\x0E56\x0ED6\x0F26\x1046\x17E6\x1816\x194C\x104A6\x07C6\x19D6\x1B56\x1096\x1BB6\x1C46\x1C56\xA626\xA8D6\xA906\xAA56\x1A86\x1A96\xA9D6\xABF6\x10E65\x1106C\x110F6\x1113C\x111D6\x116C6\x11656\x11736\x11736\x111E6\xA9F6\x102E6\x16B56\x0DEC\x112F6\x114D6\x1E8CC\x118E6\x16A66" -> '6'
    _ | isIn character "\x0667\x06F7\x096D\x09ED\x0A6D\x0AED\x0B6D\x0BED\x0C6D\x0CED\x0D6D\x0E57\x0ED7\x0F27\x1047\x17E7\x1817\x194D\x104A7\x07C7\x19D7\x1B57\x1097\x1BB7\x1C47\x1C57\xA627\xA8D7\xA907\xAA57\x1A87\x1A97\xA9D7\xABF7\x10E66\x1106D\x110F7\x1113D\x111D7\x116C7\x11657\x11737\x111E7\x102E7\x16B57\x0DED\x112F7\x114D7\x1E8CD\x118E7\x118E7\x16A67\xA9F7" -> '7'
    _ | isIn character "\x0668\x06F8\x096E\x09EE\x0A6E\x0AEE\x0B6E\x0BEE\x0C6E\x0CEE\x0D6E\x0E58\x0ED8\x0F28\x1048\x17E8\x1818\x194E\x07C8\x19D8\x1B58\x1098\x1BB8\x1C48\x1C58\xA628\xA8D8\xA908\xAA58\x1A88\x1A98\xA9D8\xABF8\x10E67\x1106E\x110F8\x1113E\x111D8\x116C8\x116C8\x11658\x11738\x111E8\xA9F8\x16B58\x102E8\x0DEE\x112F8\x114D8\x1E8CE\x118E8\x16A68" -> '8'
    _ | isIn character "&#x0669\x06F9\x096F\x09EF\x0A6F\x0AEF\x0B6F\x0BEF\x0C6F\x0CEF\x0D6F\x0E59\x0ED9\x0F29\x1049\x17E9\x1819\x194F\x104A9\x07C9\x19D9\x1B59\x1099\x1BB9\x1C49\x1C59\xA629\xA8D9\xA909\xAA59\x1A89\x1A99\xA9D9\xABF9\x10E68\x1106F\x110F9\x1113F\x111D9\x116C9\x11659\x11739\x111E9\xA9F9\x102E9\x16B59\x0DEF\x112F9\x114D9\x1E8CF\x118E9\x16A69;" -> '9'
    _ -> character  -- do not change non-numeral characters


westernizeNumerals :: String -> String
westernizeNumerals aString =
  fromCharArray (map westernizeNumeral (toCharArray aString))
